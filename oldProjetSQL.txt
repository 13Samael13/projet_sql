DROP SCHEMA if exists Projet CASCADE;
CREATE  SCHEMA Projet;
CREATE TABLE Projet.etudiants (
    id_etudiant SERIAL PRIMARY KEY NOT NULL,
    nom character varying(40) NOT NULL check ( nom<>''),
    prenom character varying(40) NOT NULL check ( prenom<>''),
    email character varying(40) UNIQUE NOT NULL --check ( email similar to '^.+@.+..+$'),
    ,mot_de_passe character varying(40) NOT NULL check ( mot_de_passe<>''),
    bloc integer  NULL check (bloc IN(1,2,3)),
    pae_valider BOOLEAN NOT NULL,
    nombre_credit_pae integer NOT NULL check (nombre_credit_pae > 0),
    nombre_credit_valider integer NOT NULL check (nombre_credit_valider >= 0)
);
CREATE TABLE Projet.unite_enseignement (
    id_ue SERIAL PRIMARY KEY NOT NULL,
    code character varying(40) UNIQUE NOT NULL,
    nom character varying(60) NOT NULL check ( nom<>''),
    nombre_inscrit integer NOT NULL check (nombre_inscrit > 0),
    bloc integer  NULL check (bloc IN(1,2,3)),
    nombre_credit integer NOT NULL check (nombre_credit > 0),
    check (code similar to 'BINV'||bloc||   nom )

);
CREATE TABLE Projet.prerequis_ue (
    ue_concerne INTEGER NOT NULL ,
    ue_prerequis INTEGER NOT NULL ,
    FOREIGN KEY(ue_concerne) REFERENCES Projet.unite_enseignement(id_ue),
    FOREIGN KEY(ue_prerequis) REFERENCES Projet.unite_enseignement(id_ue),
    PRIMARY KEY (ue_concerne,ue_prerequis)
);

CREATE TABLE Projet.ue_valides (
    id_etudiant INTEGER NOT NULL ,
    id_ue INTEGER NOT NULL ,
    FOREIGN KEY(id_etudiant) REFERENCES Projet.etudiants(id_etudiant),
    FOREIGN KEY(id_ue) REFERENCES Projet.unite_enseignement(id_ue),
     PRIMARY KEY (id_etudiant,id_ue)
);
CREATE TABLE Projet.lignes_pae (
    id_etudiant INTEGER NOT NULL ,
     id_ue INTEGER NOT NULL ,
    FOREIGN KEY(id_etudiant) REFERENCES Projet.etudiants(id_etudiant),
    FOREIGN KEY(id_ue) REFERENCES Projet.unite_enseignement(id_ue),
    PRIMARY KEY (id_etudiant,id_ue)
);

--1) Ajouter UE
CREATE OR REPLACE FUNCTION Projet.ajouterUE(nom_source VARCHAR(100), nombre_inscrits INTEGER, _bloc INTEGER,
            nbr_credits INTEGER,code_ue VARCHAR(100))
            RETURNS INTEGER AS $$
DECLARE
    id INTEGER:=0;
BEGIN
    IF EXISTS(SELECT * FROM Projet.unite_enseignement ue WHERE ue.code = code_ue)
        THEN
        RAISE 'Unite enseignement deja inscrit';
    END IF;
    INSERT INTO Projet.unite_enseignement VALUES (DEFAULT,code_ue,nom_source,nombre_inscrits,_bloc,nbr_credits)
        RETURNING id_ue INTO id;
    RETURN id;
END;
$$ LANGUAGE plpgsql;

--2) Ajouter prerequis UE
CREATE OR REPLACE FUNCTION Projet.ajouter_prerequis_UE(code_ue VARCHAR(100), code_prerequis_ue VARCHAR(100))
            RETURNS INTEGER AS $$
DECLARE
    id INTEGER:=0; -- On declare les variables qu'on va return a la fin de la fonction
    id_ue_concerne INTEGER:=0;
    id_ue_prerequis INTEGER:=0;

BEGIN
    IF EXISTS(SELECT * FROM Projet.unite_enseignement ue,Projet.prerequis_ue preUE
                WHERE ue.code = code_ue AND ue.id_ue = preUE.ue_concerne AND ue.bloc =1)
        THEN
        RAISE 'Prerequis UE deja inscrit';
    END IF;
    SELECT id_ue FROM Projet.unite_enseignement WHERE code = code_ue INTO id_ue_concerne;
    SELECT id_ue FROM Projet.unite_enseignement WHERE code = code_prerequis_ue INTO id_ue_prerequis;
    IF (id_ue_concerne IS NULL) THEN RAISE 'ue concerner est null'; END IF;
    IF (id_ue_prerequis IS NULL) THEN RAISE 'ue concerner est null'; END IF;
    INSERT INTO Projet.prerequis_ue VALUES (id_ue_concerne, id_ue_prerequis) --On lui donne les variable declarer dans DECLARE
        RETURNING ue_concerne,ue_prerequis INTO id;
    RETURN id; -- Renvoie l'id qui ici est la Pk
END;
$$ LANGUAGE plpgsql;

--3)Ajouter etudiant
CREATE OR REPLACE FUNCTION Projet.insererEtudiants(nom_source VARCHAR(100), prenom_source VARCHAR(100), email_source VARCHAR(100),
            mdp VARCHAR(100), _bloc integer, valider boolean, _nombre_credit_pae INTEGER, _nombre_credit_valide INTEGER)
            RETURNS INTEGER AS $$
DECLARE
    id INTEGER:=0;
BEGIN
    IF  EXISTS(SELECT * FROM Projet.etudiants e
                WHERE e.email=email_source) THEN
        RAISE 'Etudiants deja inscrit';
    END IF;
    INSERT INTO Projet.etudiants VALUES (DEFAULT,nom_source,prenom_source,email_source,mdp,_bloc,valider,_nombre_credit_pae,_nombre_credit_valide)
        RETURNING id_etudiant INTO id;
    RETURN id;
END;
$$ LANGUAGE plpgsql;

--Ajouter ue valid√© etudiant par un admin
CREATE OR REPLACE FUNCTION Projet.encoderUEValide(_id_etudiant INTEGER, _id_ue INTEGER)
            RETURNS INTEGER AS $$
DECLARE
    id INTEGER:=0;
BEGIN
    IF NOT EXISTS(SELECT * FROM Projet.etudiants e
                WHERE e.id_etudiant=_id_etudiant) THEN
        RAISE 'Etudiants pas inscrit';
    END IF;
    IF NOT EXISTS(SELECT * FROM Projet.unite_enseignement ue
                WHERE ue.id_ue=_id_ue) THEN
        RAISE 'UE inconnue';
    END IF;
    INSERT INTO Projet.ue_valides VALUES (_id_ue,_id_etudiant)
        RETURNING id_etudiant INTO id;
    RETURN id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW Projet.vueUE AS
    SELECT ue.code, ue.nom, ue.nombre_credit, ue.bloc FROM Projet.unite_enseignement ue
        LEFT OUTER JOIN Projet.lignes_pae lp ON ue.id_ue = lp.id_ue
        GROUP BY ue.code, ue.nom, ue.nombre_credit, ue.bloc
        ORDER BY ue.code;

--5 Visualiser etudiants d'un Bloc
CREATE OR REPLACE FUNCTION Projet.visualiser_ue_bloc( _bloc integer) RETURNS  SETOF RECORD AS $$
DECLARE
    etudiants RECORD;
BEGIN
    FOR etudiants IN  select e.nom,e.prenom,e.nombre_credit_pae from Projet.etudiants e where e.bloc = _bloc order by e.nom LOOP
 if(etudiants is null ) then raise 'la liste d etudiant est vide';
     end if ;
  return next etudiants;
 END LOOP;
   return ;
END
$$ LANGUAGE plpgsql;

--5(appli etudiant) Visuliser son PAE (vue etudiant)
    CREATE OR REPLACE FUNCTION Projet.visualiser_PAE( _id_etudiant INTEGER) RETURNS  SETOF RECORD AS $$
DECLARE
    pae RECORD;
    pae_id_etudiant INTEGER:=0;
BEGIN
    SELECT * from Projet.lignes_pae pae where pae.id_etudiant = _id_etudiant into pae_id_etudiant;
    FOR pae IN  SELECT ue.code,ue.bloc,ue.nom, ue.nombre_credit from Projet.unite_enseignement ue where pae_id_etudiant = _id_etudiant order by ue.code LOOP
 if(pae is null ) then raise 'la liste d ue est vide';
     end if ;
  return next pae;
 END LOOP;
   return ;
END
$$ LANGUAGE plpgsql;

--Enlever ue d'un pae (etudiant)
CREATE OR REPLACE FUNCTION Projet.enlever_ue_pae( _ue varchar(100),mail varchar(100)) RETURNS  integer AS $$
DECLARE
    id integer:=0;
    id_etu integer:=0;
    id_uee integer:=0;

BEGIN
    select e.id_etudiant from Projet.etudiants e where e.email = mail into id_etu;
     select ue.id_ue from Projet.unite_enseignement ue where ue.nom = _ue into id_uee;
   if EXISTS(select * from Projet.etudiants e where e.email = mail and e.pae_valider=TRUE) then
       raise 'retrait impossible car PAE deja valider';
   end if;
    delete from  Projet.lignes_pae lpae where lpae.id_etudiant=id_etu and lpae.id_ue= id_uee
    returning id_etudiant,id_ue into id;
    return id ;
END
$$ LANGUAGE plpgsql;

/*
CREATE OR REPLACE FUNCTION Projet.reinitialisePAE( mail VARCHAR(100)) RETURNS  integer AS $$
DECLARE
    id integer:=0;
    id_uee integer:=0;
    id_etu integer:=0;

BEGIN

    select ue.id_ue from Projet.unite_enseignement ue where  into id_uee;
    SELECT e.id_etudiant from Projet.etudiants e where e.email = mail into id_etu;
   if EXISTS(select * from Projet.etudiants e where e.email = mail and e.pae_valider=TRUE) then
       raise 'retrait impossible car PAE deja valider';
   end if;
    delete from  Projet.lignes_pae lpae where lpae.id_etudiant=id_etu and lpae.id_ue= id_uee
    returning id_etudiant,id_ue into id;
    return id;
END
$$ LANGUAGE plpgsql;

*/

CREATE OR REPLACE FUNCTION Projet.reinitialisePAE( mail VARCHAR(100)) RETURNS  integer AS $$
DECLARE
    id integer:=0;
    record RECORD;

BEGIN
    FOR record IN  select  pae.id_ue from Projet.unite_enseignement ue  , Projet.etudiants e , Projet.lignes_pae pae where ue.id_ue=pae.id_ue and e.id_etudiant = pae.id_etudiant and e.email =mail LOOP
     delete from  Projet.lignes_pae lpae where lpae.id_ue=record.id_ue
    returning id_etudiant,id_ue into id;
end loop ;
   if (count(record.id_ue )=0) then
       raise 'retrait impossible car PAE deja valider';
   end if;
    return id ;
END
$$ LANGUAGE plpgsql;


--Exo5 appli etudiant
CREATE OR REPLACE FUNCTION Projet.afficher(mail varchar(100)) RETURNS  setof record AS $$
DECLARE
record RECORD;
BEGIN
 FOR record IN  select  ue.nom,ue.bloc,ue.code,ue.nombre_credit from Projet.unite_enseignement ue  , Projet.etudiants e , Projet.lignes_pae pae where ue.id_ue=pae.id_ue and e.id_etudiant = pae.id_etudiant and e.email =mail order by 3 LOOP
     return  next record;
end loop ;
    return  ;

END
$$ LANGUAGE plpgsql;


SELECT * FROM Projet.insererEtudiants('Allion','Roman','blabla@hotmail.com', 'mdp',1,false,60,50);
SELECT * FROM Projet.ajouterUE('Test', 150, 1, 5, 'BINV1Test' );
SELECT * FROM Projet.ajouterUE('Test2', 150, 2, 5, 'BINV2Test2' );
SELECT * FROM Projet.ajouter_prerequis_UE('BINV1Test','BINV2Test2') ;
SELECT * FROM Projet.vueUE;
INSERT INTO Projet.lignes_pae VALUES(1,2);
INSERT INTO Projet.lignes_pae VALUES(1,1);


SELECT * FROM Projet.afficher('blabla@hotmail.com')t( nom character varying(60),bloc integer,code character varying(40), nombre_inscrit integer);
SELECT * FROM Projet.reinitialisePAE('blabla@hotmail.com');
SELECT * FROM Projet.afficher('blabla@hotmail.com')t( nom character varying(60),bloc integer,code character varying(40), nombre_inscrit integer);

--SELECT * FROM Projet.visualiser_PAE(1);
--SELECT * FROM Projet.encoderUEValide(1,2);
--SELECT * FROM Projet.prerequis_ue;