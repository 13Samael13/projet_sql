DROP SCHEMA if exists Projet CASCADE;
CREATE  SCHEMA Projet;
CREATE TABLE Projet.etudiants (
    id_etudiant SERIAL PRIMARY KEY NOT NULL,
    nom character varying(40) NOT NULL check ( nom<>''),
    prenom character varying(40) NOT NULL check ( prenom<>''),
    email character varying(40) UNIQUE NOT NULL check ( email<>'' ) ,
    mot_de_passe character varying(40) NOT NULL check ( mot_de_passe<>''),
    bloc integer  NULL default 0 check (bloc IN(1,2,3)),
    pae_valider boolean NOT NULL ,
    nombre_credit_pae integer NOT NULL  default 0 check (nombre_credit_pae >= 0),
    nombre_credit_valider integer NOT NULL default 0 check (nombre_credit_valider >= 0)
);
/*
 check email
 */
CREATE TABLE Projet.unite_enseignement (
    id_ue SERIAL PRIMARY KEY NOT NULL,
    code character varying(40) UNIQUE NOT NULL,
    nom character varying(60) NOT NULL check ( nom<>''),
    nombre_inscrit integer NOT NULL default 0 check (nombre_inscrit >= 0),
    bloc integer  not NULL check (bloc IN(1,2,3)),
    nombre_credit integer NOT NULL check (nombre_credit > 0),
    check (code similar to 'BINV'||bloc||nom )

);
CREATE TABLE Projet.prerequis_ue (
    ue_concerne INTEGER NOT NULL check ( ue_concerne<> ue_prerequis) ,
    ue_prerequis INTEGER  NOT NULL check ( ue_concerne<> ue_prerequis),
    FOREIGN KEY(ue_concerne) REFERENCES Projet.unite_enseignement(id_ue),
    FOREIGN KEY(ue_prerequis) REFERENCES Projet.unite_enseignement(id_ue),
    PRIMARY KEY (ue_concerne,ue_prerequis)
);

CREATE TABLE Projet.ue_valides (
    id_etudiant INTEGER NOT NULL ,
    id_ue INTEGER NOT NULL ,
    FOREIGN KEY(id_etudiant) REFERENCES Projet.etudiants(id_etudiant),
    FOREIGN KEY(id_ue) REFERENCES Projet.unite_enseignement(id_ue),
    PRIMARY KEY (id_etudiant,id_ue)
);
CREATE TABLE Projet.lignes_pae (
    id_etudiant INTEGER NOT NULL ,
    id_ue INTEGER NOT NULL ,
    FOREIGN KEY(id_etudiant) REFERENCES Projet.etudiants(id_etudiant),
    FOREIGN KEY(id_ue) REFERENCES Projet.unite_enseignement(id_ue),
    PRIMARY KEY (id_etudiant,id_ue)
);
CREATE OR REPLACE FUNCTION Projet.bloc(nom_etudiant VARCHAR(100), prenom_etudiant VARCHAR(100),email_etudiant VARCHAR(100)) RETURNS integer AS $$
DECLARE
    id INTEGER:=0;
BEGIN
	IF NOT EXISTS(SELECT * FROM Projet.etudiants e where e.nom=nom_etudiant and e.prenom=prenom_etudiant and e.email=email_etudiant) THEN
		RAISE 'Etudiant inconnue';
	END IF;
	IF  EXISTS (SELECT e.id_etudiant FROM Projet.etudiants e
        where e.nom=nom_etudiant and e.prenom=prenom_etudiant and e.email=email_etudiant and e.nombre_credit_valider+e.nombre_credit_pae=180 and e.bloc is null ) then
           Update  Projet.etudiants e set bloc=3 where e.nom=nom_etudiant and e.prenom=prenom_etudiant and e.email=email_etudiant and e.nombre_credit_valider+e.nombre_credit_pae=180
           RETURNING bloc INTO id ;
	END IF;
	IF  EXISTS (SELECT * FROM Projet.etudiants e
        where e.nom=nom_etudiant and e.prenom=prenom_etudiant and e.email=email_etudiant and e.nombre_credit_valider<45 and e.bloc is null ) then
           Update  Projet.etudiants e set bloc=1 where e.nom=nom_etudiant and e.prenom=prenom_etudiant and e.email=email_etudiant and e.nombre_credit_valider<45
           RETURNING  bloc  INTO id;
	END IF;
 Update  Projet.etudiants e set bloc=2 where e.nom=nom_etudiant and e.prenom=prenom_etudiant and e.email=email_etudiant and e.bloc is null
	RETURNING  bloc  INTO id;
	RETURN id ;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.insererEtudiantss(nom_source VARCHAR(100), prenom_source VARCHAR(100), email_source  VARCHAR(100),
			mdp VARCHAR(100), _bloc  integer, valider boolean, _nombre_credit_pae INTEGER, _nombre_credit_valide INTEGER)
			RETURNS INTEGER AS $$
DECLARE
	id INTEGER:=0;
BEGIN
	IF  EXISTS(SELECT * FROM Projet.etudiants e
			    WHERE e.email=email_source) THEN
		RAISE 'Etudiants deja inscrit';
	END IF;
	INSERT INTO Projet.etudiants VALUES (DEFAULT,nom_source,prenom_source,email_source,mdp,_bloc,valider,_nombre_credit_pae,_nombre_credit_valide)
		RETURNING id_etudiant INTO id;
	RETURN id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.insererue(nom_source VARCHAR(100), _nombre_inscrit integer,_bloc integer,
			_nombre_credit integer, _code_eu varchar(100))
			RETURNS INTEGER AS $$
DECLARE
	id INTEGER:=0;
BEGIN
	IF  EXISTS(SELECT * FROM Projet.unite_enseignement ue
			    WHERE ue.code= _code_eu) THEN
		RAISE 'UE deja encodée';
	END IF;
	INSERT INTO Projet.unite_enseignement VALUES (DEFAULT,_code_eu,nom_source,_nombre_inscrit,_bloc,_nombre_credit)
		RETURNING id_ue INTO id;
	RETURN id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.prerequis(_ue_concerne VARCHAR(100), _ue_prerequis varchar(100))
			RETURNS INTEGER AS $$
DECLARE
    id INTEGER:=0;
    recor1 RECORD;
    recor2 RECORD;
BEGIN
	 select id_ue,ue.bloc from Projet.unite_enseignement ue where ue.code = _ue_prerequis  into recor1;
	 if(recor1.id_ue is  null) then RAISE  ' id prerequis is null ';
	END IF;




    select ue.id_ue,ue.bloc from Projet.unite_enseignement ue where ue.code = _ue_concerne into recor2;
	   if(recor2.id_ue is null) then RAISE  ' id concerne is null';
	END IF;




	 if(recor1.bloc >= recor2.bloc  ) then RAISE  'un prerequis ne peut pas etre appliquer à un ue de bloc inferieur ou egal';
	 end if;
	INSERT INTO Projet.prerequis_ue VALUES (recor2.id_ue,recor1.id_ue)
		RETURNING ue_concerne,ue_prerequis INTO id;
	RETURN id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.ue_valide(nom_source VARCHAR(100), prenom_source varchar(100),nom_ue varchar(100))
			RETURNS INTEGER AS $$
DECLARE
    id INTEGER:=0;
	id_etudiant_concerne INTEGER:=0;
    id_ue_concerne INTEGER:=0;
BEGIN
	 select id_ue from Projet.unite_enseignement ue where ue.nom = nom_ue into id_ue_concerne;

	 if(id_ue_concerne is  null) then RAISE  ' id ue is null ';
	END IF;


    select id_etudiant from Projet.etudiants e where e.nom = nom_source and e.prenom =prenom_source into id_etudiant_concerne;
	  if(id_etudiant_concerne is null) then RAISE  ' id etudiant is null';
	END IF;


	INSERT INTO Projet.ue_valides VALUES (id_etudiant_concerne,id_ue_concerne)
		RETURNING id_etudiant,id_ue INTO id;
	RETURN id;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION Projet.nombre_credit_valider() RETURNS TRIGGER AS $$
DECLARE
BEGIN

	update Projet.etudiants e set nombre_credit_valider=nombre_credit_valider+ue.nombre_credit
	FROM Projet.unite_enseignement ue , Projet.ue_valides
	where ue.id_ue = new.id_ue and e.id_etudiant= new.id_etudiant ;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_nombre_credit AFTER insert  ON Projet.ue_valides
	FOR EACH ROW EXECUTE PROCEDURE Projet.nombre_credit_valider();

CREATE OR REPLACE FUNCTION Projet.visualiser_etudiants_bloc( _bloc integer) RETURNS  SETOF RECORD AS $$
DECLARE
    etudiants RECORD;
BEGIN
    FOR etudiants IN  select e.nom,e.prenom,e.nombre_credit_pae from Projet.etudiants e where e.bloc = _bloc order by e.nom LOOP
  return next etudiants;
 END LOOP;
    if(etudiants is null ) then raise 'la liste d etudiant est vide';
     end if ;
   return ;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.visualiser_credit_pae( ) RETURNS  SETOF RECORD AS $$
DECLARE
    etudiants RECORD;
BEGIN
    FOR etudiants IN  select e.nom,e.prenom,e.nombre_credit_pae,coalesce(e.bloc,null) from Projet.etudiants e order by e.nombre_credit_pae LOOP
 return next etudiants;
 END LOOP;
    if(etudiants =null) then raise 'liste d etudiant vide';
     end if ;
    return ;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.visualiser_pae_pas_valider( ) RETURNS  SETOF RECORD AS $$
DECLARE
    etudiants RECORD;
BEGIN
    FOR etudiants IN  select  e.nom,e.prenom,e.nombre_credit_valider from Projet.etudiants e where e.pae_valider = False LOOP
 return next etudiants;
 END LOOP;
    if(etudiants =null) then raise 'liste d etudiant vide';
     end if ;
    return ;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.visualiser_ue_bloc(_bloc integer ) RETURNS  SETOF RECORD AS $$
DECLARE
    record RECORD;
BEGIN
    FOR record IN  select ue.nom, ue.code,nombre_inscrit from Projet.unite_enseignement ue where ue.bloc = _bloc order by ue.nombre_inscrit LOOP
 return next record;
 END LOOP;
    if(record =null) then raise 'liste d ue vide';
     end if ;
    return ;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.ajouter_ue_pae( _ue varchar(100),mail varchar(100)) RETURNS  integer AS $$
DECLARE
    id integer:=0;
    id_etu integer:=0;
     id_uee integer:=0;
    bloc_ue integer :=0;
    record record;
    liste_ue_valide record;
      test record;
BEGIN
    select e.id_etudiant from Projet.etudiants e where e.email = mail into id_etu;
     select ue.id_ue from Projet.unite_enseignement ue where ue.nom = _ue into id_uee;
     select ue.bloc from Projet.unite_enseignement ue where ue.nom = _ue into bloc_ue;
   if EXISTS(select * from Projet.etudiants e where e.email = mail and e.pae_valider=TRUE) then raise 'PAE deja valider';
   end if;
   if exists(select * from Projet.ue_valides uev where  uev.id_etudiant=id_etu and uev.id_ue=id_uee) then raise 'UE deja valide';
   end if;
if exists(select e.id_etudiant from Projet.etudiants e   where  nombre_credit_valider<30 and id_etudiant=id_etu and bloc_ue !=1  )
    then raise ' peut pas choisir des ue du bloc 2 ou 3';
end if;

 FOR liste_ue_valide IN select distinct  pue.ue_prerequis from Projet.prerequis_ue pue where pue.ue_concerne= (select ue.id_ue from Projet.unite_enseignement ue where ue.nom = _ue)loop
select distinct  uev.id_ue from Projet.ue_valides uev ,Projet.etudiants e  where uev.id_etudiant=id_etu and uev.id_ue=liste_ue_valide.ue_prerequis into test;
if(test.id_ue is null ) then raise 'prerequis non validé'; end if;

END LOOP;

    insert into Projet.lignes_pae values (id_etu,id_uee)
    returning id_etudiant,id_ue into id;
    return id ;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.enlever_ue_pae( _ue varchar(100),mail varchar(100)) RETURNS  integer AS $$
DECLARE
    id integer:=0;
    id_etu integer:=0;
     id_uee integer:=0;
BEGIN
    select e.id_etudiant from Projet.etudiants e where e.email = mail into id_etu;
     select ue.id_ue from Projet.unite_enseignement ue where ue.nom = _ue into id_uee;
   if EXISTS(select * from Projet.etudiants e where e.email = mail and e.pae_valider=TRUE) then
       raise 'retrait impossible car PAE deja valider';
   end if;
    delete from  Projet.lignes_pae lpae where lpae.id_etudiant=id_etu and lpae.id_ue= id_uee
    returning id_etudiant,id_ue into id;
    return id ;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.valider_pae(mail varchar(100)) RETURNS  setof record AS $$
DECLARE
    id integer:=0;
    record RECORD;
    record2 RECORD;
    record3 RECORD;
     record4 RECORD;
    record5 RECORD;
BEGIN
    select e.nom,e.prenom from Projet.etudiants e where e.email=mail into record4  ;
    perform Projet.bloc(record4.nom,record4.prenom,mail);
       select ue.nom from Projet.lignes_pae pae , Projet.etudiants e , Projet.unite_enseignement ue where  e.id_etudiant=pae.id_etudiant and ue.id_ue=pae.id_ue and e.email = mail into record5;
       select sum(ue.nombre_credit)+e.nombre_credit_valider as sommme  from Projet.lignes_pae pae , Projet.etudiants e , Projet.unite_enseignement ue where  e.id_etudiant=pae.id_etudiant and ue.id_ue=pae.id_ue and e.email = mail group by e.nombre_credit_valider into record ;
       if(record.sommme=180)then raise 'la validation a échoué1';
       end if;
       select  sum(ue.nombre_credit)  as sommme from Projet.etudiants e,Projet.unite_enseignement ue , Projet.lignes_pae pae where e.id_etudiant=pae.id_etudiant and ue.id_ue=pae.id_ue and e.email = mail and e.nombre_credit_valider<45 into record2;
       if( record2.sommme>60) then raise 'la validation a échoué2';
       end if;
       select  sum(ue.nombre_credit)  as sommme from Projet.etudiants e,Projet.unite_enseignement ue , Projet.lignes_pae pae where e.id_etudiant=pae.id_etudiant and ue.id_ue=pae.id_ue and e.email = mail  into record3;
       if( record3.sommme not BETWEEN 0 and 74) then raise 'la validation a échoué3';
       end if;
       Update  Projet.etudiants e set pae_valider=TRUE,nombre_credit_pae=record3.sommme where e.email = mail
	RETURNING  e.id_etudiant  INTO id;
	RETURN next record4;

END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.nombre_inscript() RETURNS TRIGGER AS $$
DECLARE
BEGIN

	update Projet.unite_enseignement ue set nombre_inscrit=nombre_inscrit+1
	FROM Projet.lignes_pae pae
	where pae.id_etudiant = new.id_etudiant  and ue.id_ue=pae.id_ue;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_nombre_inscrit AFTER UPDATE of nombre_credit_pae ON Projet.etudiants
	FOR EACH ROW EXECUTE PROCEDURE Projet.nombre_inscript();

CREATE OR REPLACE FUNCTION Projet.afficherUE_pae(mail varchar(100)) RETURNS  setof record AS $$
DECLARE
record RECORD;
    record1 RECORD;
    record2 RECORD;
     record3 RECORD;
BEGIN
 FOR record IN  select  distinct ue.nom from Projet.unite_enseignement ue  where ue.id_ue not in (select uev.id_ue from Projet.ue_valides uev , Projet.etudiants e where e.id_etudiant=uev.id_etudiant and e.email=mail )LOOP
     FOR record1 IN select distinct ue.nom from Projet.unite_enseignement ue  where ue.id_ue not in (select pae.id_ue from Projet.lignes_pae pae , Projet.etudiants e where e.id_etudiant=pae.id_etudiant and e.email=mail )LOOP
         if(record1.nom = record.nom) then
FOR record2 IN  select distinct ue.nom from Projet.unite_enseignement ue, Projet.prerequis_ue pue where ue.id_ue=pue.ue_concerne and pue.ue_prerequis  in (select uev.id_ue from Projet.ue_valides uev , Projet.etudiants e where e.id_etudiant=uev.id_etudiant and e.email=mail)LOOP
 if(record2.nom = record1.nom) then
    RETURN next record2 ;
    end if;
 end loop ;
end if;
end loop ;
end loop ;
FOR record3 IN   select  ue.nom from Projet.unite_enseignement ue  where ue.bloc=1 and ue.id_ue not in (select uev.id_ue from Projet.ue_valides uev , Projet.etudiants e where e.id_etudiant=uev.id_etudiant  and e.email=mail)LOOP
     FOR record1 IN select distinct ue.nom from Projet.unite_enseignement ue  where ue.id_ue not in (select pae.id_ue from Projet.lignes_pae pae , Projet.etudiants e where e.id_etudiant=pae.id_etudiant and e.email=mail )LOOP
         if(record1.nom = record3.nom) then
return  next record3;
end if ;
 end loop ;
end loop ;
	return ;

END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.visualiser_pae(mail varchar(100)) RETURNS  setof record AS $$
DECLARE
record RECORD;
BEGIN
 FOR record IN  select  ue.nom,ue.bloc,ue.code,ue.nombre_credit from Projet.unite_enseignement ue  , Projet.etudiants e , Projet.lignes_pae pae where ue.id_ue=pae.id_ue and e.id_etudiant = pae.id_etudiant and e.email =mail order by 3 LOOP
     return  next record;
end loop ;
	return ;

END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION Projet.reinitialisePAE( mail VARCHAR(100)) RETURNS  integer AS $$
DECLARE
    id integer:=0;
    record RECORD;

BEGIN
    if exists(select * from Projet.etudiants e where e.email = mail and e.pae_valider = TRUE) then
       raise 'réinitialisation impossible car PAE deja valider';
   end if;
    FOR record IN  select  pae.id_ue from Projet.unite_enseignement ue  , Projet.etudiants e , Projet.lignes_pae pae where ue.id_ue=pae.id_ue and e.id_etudiant = pae.id_etudiant and e.email =mail LOOP
     delete from  Projet.lignes_pae lpae where lpae.id_ue=record.id_ue
    returning id_etudiant,id_ue into id;
end loop ;

    return id ;
END
$$ LANGUAGE plpgsql;

select * from Projet.insererEtudiantss('Lamien','Sienou','leoncelamien@gmail.com','swdfghjk',null,FALSE,0,0);
select * from Projet.insererEtudiantss('Cris','Gerald','gerald@gmail.com','swdghjk',null,FALSE,0,0);
select * from Projet.insererEtudiantss('Ngy','Kevin','kevin@gmail.com','swdghjk',null,FALSE,0,0);


select  * from  Projet.insererue('Algo',0,1,6,'BINV1Algo');
select  * from  Projet.insererue('APOO',0,1,6,'BINV1APOO');
select  * from  Projet.insererue('BD',0,1,5,'BINV1BD');
select  * from  Projet.insererue('SD',0,1,6,'BINV1SD');
select  * from  Projet.insererue('web',0,1,5,'BINV1web');
select  * from  Projet.insererue('OS',0,1,5,'BINV1OS');
select  * from  Projet.insererue('FO',0,1,5,'BINV1FO');
select  * from  Projet.insererue('ECO',0,1,5,'BINV1ECO');
select  * from  Projet.insererue('Math1',0,1,4,'BINV1Math1');
select  * from  Projet.insererue('Math2',0,1,6,'BINV1Math2');
select  * from  Projet.insererue('projet',0,1,3,'BINV1projet');
select  * from  Projet.insererue('Ang',0,1,4,'BINV1Ang');

select  * from  Projet.insererue('C',0,2,3,'BINV2C');
select  * from  Projet.insererue('Analyse',0,2,4,'BINV2Analyse');
select  * from  Projet.insererue('BD2',0,2,6,'BINV2BD2');
select  * from  Projet.insererue('SD2',0,2,3,'BINV2SD2');
select  * from  Projet.insererue('web2',0,2,6,'BINV2web2');
select  * from  Projet.insererue('DevOps',0,2,5,'BINV2DevOps');
select  * from  Projet.insererue('entreprises',0,2,6,'BINV2entreprises');
select  * from  Projet.insererue('Java',0,2,5,'BINV2Java');
select  * from  Projet.insererue('ConceptionAPP',0,2,8,'BINV2ConceptionAPP');
select  * from  Projet.insererue('Linux',0,2,6,'BINV2Linux');
select  * from  Projet.insererue('mobile',0,2,3,'BINV2mobile');
select  * from  Projet.insererue('Ang2',0,2,5,'BINV2Ang2');


select * from Projet.prerequis('BINV2C','BINV1SD');
select * from Projet.prerequis('BINV2C','BINV1FO');
select * from Projet.prerequis('BINV2Analyse','BINV1APOO');
select * from Projet.prerequis('BINV2Analyse','BINV1BD');
select * from Projet.prerequis('BINV2BD2','BINV1APOO');
select * from Projet.prerequis('BINV2BD2','BINV1SD');
select * from Projet.prerequis('BINV2BD2','BINV1BD');
select * from Projet.prerequis('BINV2Java','BINV1SD');
select * from Projet.prerequis('BINV2Java','BINV1APOO');
select * from Projet.prerequis('BINV2web2','BINV1APOO');
select * from Projet.prerequis('BINV2web2','BINV1BD');
select * from Projet.prerequis('BINV2web2','BINV1web');
select * from Projet.prerequis('BINV2web2','BINV1projet');
select * from Projet.prerequis('BINV2DevOps','BINV1Algo');
select * from Projet.prerequis('BINV2DevOps','BINV1FO');
select * from Projet.prerequis('BINV2DevOps','BINV1OS');
select * from Projet.prerequis('BINV2SD2','BINV1APOO');
select * from Projet.prerequis('BINV2SD2','BINV1SD');
select * from Projet.prerequis('BINV2SD2','BINV1web');
select * from Projet.prerequis('BINV2SD2','BINV1Math2');
select * from Projet.prerequis('BINV2entreprises','BINV1ECO');
select * from Projet.prerequis('BINV2ConceptionAPP','BINV1APOO');
select * from Projet.prerequis('BINV2ConceptionAPP','BINV1BD');
select * from Projet.prerequis('BINV2ConceptionAPP','BINV1SD');
select * from Projet.prerequis('BINV2ConceptionAPP','BINV1web');
select * from Projet.prerequis('BINV2ConceptionAPP','BINV1projet');
select * from Projet.prerequis('BINV2Linux','BINV1FO');
select * from Projet.prerequis('BINV2Linux','BINV1Algo');
select * from Projet.prerequis('BINV2Linux','BINV1OS');
select * from Projet.prerequis('BINV2Ang2','BINV1Ang');
select * from Projet.prerequis('BINV2mobile','BINV1APOO');


select * from Projet.ue_valide('Lamien','Sienou','Algo');
select * from Projet.ue_valide('Lamien','Sienou','APOO');
select * from Projet.ue_valide('Lamien','Sienou','BD');
select * from Projet.ue_valide('Lamien','Sienou','web');
select * from Projet.ue_valide('Lamien','Sienou','OS');
select * from Projet.ue_valide('Lamien','Sienou','FO');
select * from Projet.ue_valide('Lamien','Sienou','ECO');
select * from Projet.ue_valide('Lamien','Sienou','Math1');
select * from Projet.ue_valide('Lamien','Sienou','Math2');
select * from Projet.ue_valide('Lamien','Sienou','projet');
select * from Projet.ue_valide('Lamien','Sienou','Ang');

select * from Projet.ue_valide('Cris','Gerald','Algo');
select * from Projet.ue_valide('Cris','Gerald','APOO');
select * from Projet.ue_valide('Cris','Gerald','SD');
select * from Projet.ue_valide('Cris','Gerald','Ang');
select * from Projet.ue_valide('Cris','Gerald','projet');
select * from Projet.ue_valide('Cris','Gerald','Math1');
select * from Projet.ue_valide('Cris','Gerald','Math2');
select * from Projet.ue_valide('Cris','Gerald','ECO');
select * from Projet.ue_valide('Cris','Gerald','FO');

select * from Projet.ue_valide('Ngy','Kevin','Algo');
select * from Projet.ue_valide('Ngy','Kevin','APOO');
select * from Projet.ue_valide('Ngy','Kevin','BD');
select * from Projet.ue_valide('Ngy','Kevin','SD');
select * from Projet.ue_valide('Ngy','Kevin','projet');
/*
select * from Projet.bloc('Ngy','Kevin','kevin@gmail.com');
select * from Projet.bloc('Lamien','Sienou','leoncelamien@gmail.com');
select * from Projet.bloc('Cris','Gerald','gerald@gmail.com');


 */

select * from Projet.visualiser_etudiants_bloc(1) t(nom varchar(40),prenom varchar(40),nombre_credit_pae integer);

select * from Projet.visualiser_credit_pae() t(nom varchar(40),prenom varchar(40),nombre_credit_pae integer,bloc integer);

select * from Projet.visualiser_pae_pas_valider() t(nom varchar(40),prenom varchar(40),nombre_credit_valider integer);

select * from Projet.visualiser_ue_bloc(1)  t(nom varchar(60),code varchar(40),nombre_inscrit integer);

select * from Projet.afficherUE_pae('leoncelamien@gmail.com') t(nom varchar(60));
select * from Projet.afficherUE_pae('kevin@gmail.com') t(nom varchar(60));
select * from Projet.afficherUE_pae('gerald@gmail.com') t(nom varchar(60));

select * from Projet.ajouter_ue_pae('Java','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('web2','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('SD','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('C','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('Ang2','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('mobile','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('Linux','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('ConceptionAPP','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('entreprises','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('DevOps','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('SD2','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('BD2','leoncelamien@gmail.com');
select * from Projet.ajouter_ue_pae('Analyse','leoncelamien@gmail.com');

select * from Projet.visualiser_pae('leoncelamien@gmail.com')t(nom character varying(60),bloc integer, code character varying(40),nombre_inscrit integer);

select * from Projet.valider_pae('leoncelamien@gmail.com') t( nom varchar(40),prenom varchar(40)) ;

select * from Projet.reinitialisePAE('leoncelamien@gmail.com');

